#!/bin/sh

SCRIPT_PATH="$0"
while [ -h "$SCRIPT_PATH" ]
do
  SCRIPT_PATH=`readlink -f $SCRIPT_PATH`
done

cd `dirname $SCRIPT_PATH`
SCRIPT_DIR=`pwd -P`

#
# JVM-level configurations that need to be specified prior to starting 
# the JVM; everything else should be configurable in the application.yml
#
keystore=/freeipa-pwd-portal/config/pw-portal.keystore
keystore_pass="changeit"
cert_alias="freeipa-pwd-portal"
freeipa_cert=

usage() 
{
  echo "usage: docker run -d -v \$PWD/pwd-portal:/freeipa-pwd-portal/config xetusoss/freeipa-pwd-portal [-ks keystore] [-kp keystore_pass] [-a cert_alias] [-fc freeipa_cert]"
  echo
  echo " -ks | --keystore        the container path for the keystore"
  echo "                         default: /freeipa-pwd-portal/config/pw-portal.keystore"
  echo
  echo "                         note: a new keystore with a self-signed cert will "
  echo "                         be created if no file exists at the specified path"
  echo
  echo " -kp | --keystore-pass   the container path for the keystore"
  echo "                         default: changeit"
  echo 
  echo " -a | --cert-alias       the alias in the keystore for the password portal\'s "
  echo "                         SSL certificate"
  echo "                         default: freeipa-pwd-portal"
  echo 
  echo " -fc | --freeipa-cert    the container path for the FreeIPA certificate, if needed"
  echo "                         default: (not set)"
  echo 
  echo "                         note: the certificate will be imported into the specified "
  echo "                         keystore if the cert is specified and found"
  echo
  echo " -h | --help             show this help message and exit"
  echo  
}

while [ "$1" != "" ]; do
  case $1 in
    -ks | --keystore )       shift
                            keystore=$1
                            ;;
    -kp | --keystore-pass ) shift
                            keystore_pass=$1
                            ;;
    -a | --cert-alias )     shift
                            cert_alias=$1
                            ;;
    -fc | --freeipa-cert )  shift
                            freeipa_cert=$1
                            ;;
    -h | --help )           usage
                            exit 1
                            ;;
    * )                     usage
                            exit 1
  esac
  shift
done


#
# If no keystore is supplied containing the freeipa-pwd-portal private and public
# keys then generate a self-signed cert at the specified keystore path
#
generate_insecure_cert="false"
if [[ -e "$keystore" ]]; then
  keytool -list -keystore "$keystore" \
                -alias "$cert_alias" \
                -storepass "$keystore_pass" > /dev/null
  if [[ "$?" -gt 0 ]]; then
    echo "Generating am insecure cert because $cert_alias not found in $keystore"
    generate_insecure_cert="true"
  else
    echo "$cert_alias found in $keystore"
  fi
else
  echo "Generating insecure cert because no keystore found at $keystore"
  generate_insecure_cert="true"
fi

if [[ "$generate_insecure_cert" == "true" ]]; then
  echo "Generating a self-signed cert into $keystore..."
  keytool -genkey -noprompt -trustcacerts \
          -keyalg RSA \
          -alias "$cert_alias" \
          -dname "CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown" \
          -keypass "$keystore_pass" \
          -keystore "$keystore" \
          -storepass "$keystore_pass"
fi

#
# Ensure that the FreeIPA certificate is available in the keystore. This
# is required since we may have possible created an entirely new keystore
# in the above step (for non-production environments)
#
if [[ "$freeipa_cert" != "" && -e "$freeipa_cert" ]]; then
  echo "Adding the FreeIPA certificate to the keystore from $freeipa_cert"
  keytool -import -trustcacerts -noprompt \
          -alias freeipa \
          -file "$freeipa_cert" \
          -keystore "$keystore" \
          -storepass "$keystore_pass"
fi

echo "Starting the Free IPA Password Portal..."
java -jar server.jar \
     -Xmx48m -XX:+UseSerialGC \
     -Duser.timezone=UTC \
     -Djavax.net.ssl.keyStore="$keystore"
     -Djavax.net.ssl.keyStorePassword="$keystore_pass"
     -Djavax.net.ssl.trustStore="$keystore"
     -Djavax.net.ssl.trustStorePassword="$keystore_pass"