apply plugin: 'com.moowork.node'

node {
  download = true;
  version = "6.4.0"
  npmVersion = "3.10.3"
  npmCommand = "npm"

  // Set the work directory for unpacking node
  workDir = file("${project.projectDir}/.tools/node")

  // Set the work directory for NPM
  npmWorkDir = file("${project.projectDir}/.tools/npm")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}

task clean() {
  description = "Cleans the build folders"
  group = "clean"
  delete 'build', 'dist'
}

task setup(dependsOn: ['nodeSetup', 'npmInstall'], type: NpmTask) {
  group = "setup"
  description = "Downloads and installs a local versions of Node and NPM and installs all client dependencies"
  args = ['install']
}

task run(type: NpmTask) {
  group = "application"
  description = "Runs the UI server and client with live reload on changes to both UI server and UI client code. Use the port specified in the line \"Development server is listening [port ...]\"."
  args = ['start']
}

task build(dependsOn: ['setup'], type: NpmTask) {
  group = "build"
  description = "Builds the static Vue assets and server for deployment"
  args = ['run', 'build']
}

task buildDockerDependencies(dependsOn: ['build'],
                             type: Copy) {
  group = "build"
  description = "Prepares all of dependencies required to build the Docker image"
  def dockerBuildDir = "build/docker/";
  new File(dockerBuildDir).mkdir()

  from "package.json"
  into "$dockerBuildDir/package.json"

  from "dist/"
  into "$dockerBuildDir/"

  from "src/docker/"
  into "$dockerBuildDir/"
}

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

 /*
  * Builds a new copy of the docker image and publishes it to the local repository
  */
 task buildDockerImage(type: DockerBuildImage) {
   dependsOn "buildDockerDependencies"
   group "Build"
   description "Builds a Docker image for the UI project"
   inputDir file("${projectDir}/build/docker")
   dockerFile file("${projectDir}/build/docker/Dockerfile")
   imageId "${project.dockerGroup}/freeipa-pwd-portal-ui"
   tag  "${project.dockerGroup}/freeipa-pwd-portal-ui:${project.version}"
 }

 task tagDockerImage(type: DockerTagImage) {
   dependsOn "buildDockerImage"
   group "Publishing"
   description "Publishes the built docker image"
   imageId = "${project.dockerGroup}/freeipa-pwd-portal-ui:${project.version}"
   tag = "${project.version}"
   repository = "${project.dockerGroup}/freeipa-pwd-portal-ui"
 }